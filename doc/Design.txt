;;;;;
;;;;; Design of Egison3
;;;;;

;;;
;;; Type system
;;;

;;
;; Type Examples
;;

;
; Types are declared with ':' infix operator.
; ':' operator is left-associative.
;    
(define $add : [Integer Integer] -> Intger
  (lambda [$x $y] (+ x y)))

;
; Data which defines how to pattern-match is called `matcher'.
; A mather is defined with a matcher expression.
; A mather expression takes primitive-match-clauses as a type expression of Egison2.
; The type of matcher is "(Matcher <target-type>)".
; "Matcher" is primitive-pattern-constructor as '->'.
;
(define $integer : (Matcher Integer)
  (matcher
    {[,$val []
      {[$tgt (if (eq? val tgt)
                 {[]}
                 {})]}]
     [$ [something]
      {[$tgt {tgt}]}]}))

;
; Types and mathers have one-to-many relationships.
; e.g.
; Integer -> integer
;         -> (mod 10)
;         -> (mod 100)
;
(define $mod : Integer -> (Matcher Integer)
  (lambda [$m]
    (matcher
      {[,$val []
        {[$tgt (if (eq? (mod val m) (mod tgt m))
                   {[]}
                   {})]}]
       [$ [integer]
        {[$tgt {(mod tgt m)}]}]
       })))

;
; 'function' expression is like 'match-lambda' of other languages.
;
(define $list : (Matcher $a) -> (Matcher (Collection ,a))
  (lambda [$a]
    (matcher
      {[,$val []
        {[$tgt (if ((equal-list? a) val tgt)
                   {[]}
                   {})]}]
       [<nil> []
        {[{} {[]}]
         [_ {}]}]
       [<cons $ $> [a (list a)]
        {[{$x .$xs} {[x xs]}]
         [_ {}]}]
       [<snoc $ $> [a (list a)]
        {[{.$xs $x} {[x xs]}]
         [_ {}]}]
       [<join ,$hs $> [(list a)]
        {[$tgt (letrec {[$looper (function [(list a) (list a)]
                                   {[[<nil> $ys] {ys}]
                                    [[<cons $x $xs2> <cons ,x $ys2>] (looper xs2 ys2)]
                                    [[_ _] {}]})]}
                 (looper hs tgt))]}]
       [<join $ $> [(list a) (list a)]
        {[$tgt (letrec {[$looper (lambda [$ret $xs $ys]
                                   (match ys (list a)
                                     {[<nil> {@ret [xs {}]}]
                                      [<cons $y $ys2> (looper {@ret [xs ys]} {@xs y} ys2)]}))]}
                 (looper {} {} tgt))]}]
       [<nioj ,$ts $> [(list a)]
        {[$tgt (letrec {[$looper (function [(list a) (list a)]
                                   {[[<nil> $ys] {ys}]
                                    [[<snoc $x $xs2> <snoc ,x $ys2>] (looper xs2 ys2)]
                                    [[_ _] {}]})]}
                 (looper ts tgt))]}]
       [<nioj $ $> [(list a) (list a)]
        {[$tgt (letrec {[$looper (lambda [$ret $xs $ys]
                                   (match ys (list a)
                                     {[<nil> {@ret [xs {}]}]
                                      [<snoc $y $ys2> (looper {[xs ys] @ret} {@xs y} ys2)]}))]}
                 (looper {} {} tgt))]}]
       [$ [something]
        {[$tgt {tgt}]}]
       ))))

(define $multiset : (Matcher $a) -> (Matcher (Collection ,a))
  (lambda [$a]
    (matcher
      {[,$val []
        {[$tgt (if ((equal-multiset? a) val tgt)
                   {[]}
                   {})]}]
       [<nil> []
        {[{} {[]}]
         [_ {}]}]
       [<cons $ $> [a (multiset a)]
        [$tgt (match-all tgt (list a)
                [<join $hs <cons $x $ts>> [x {@hs @ts}]])]]
       [<join ,$xs $> [(multiset a)]
        {[$tgt (letrec {[$looper (function [(multiset a) (multiset a)]
                                   {[[<nil> $tgt2] {[tgt2]}]
                                     [[<cons $x $xs2> <cons ,x $tgt2>] (looper xs2 tgt2)]
                                     [_ {}]})]}
                 (looper xs tgt))]}]
       [$ [something]
        {[$tgt {tgt}]}]
       })))

;
; Definition of multiset is written also as below.
; * pay atterntion around `cons' matcher clauses.
;
(define $multiset : (Matcher $a) -> (Matcher (Collection ,a))
  (lambda [$a]
    (matcher
      {[,$val []
        {[$tgt (if ((equal-multiset? a) val tgt)
                   {[]}
                   {})]}]
       [<nil> []
        {[{} {[]}]
         [_ {}]}]
       [<cons $ _> [a]
        [$tgt tgt]]
       [<cons ,val $> [(multiset a)]
        [$tgt (match-all tgt (list a)
                [<join $hs <cons ,val $ts>> [{@hs @ts}]])]]
       [<join ,$xs $> [(multiset a)]
        {[$tgt (letrec {[$looper (function [(multiset a) (multiset a)]
                                   {[[<nil> $tgt2] {[tgt2]}]
                                     [[<cons $x $xs2> <cons ,x $tgt2>] (looper xs2 tgt2)]
                                     [_ {}]})]}
                 (looper xs tgt))]}]
       [$ [something]
        {[$tgt {tgt}]}]
       })))

(define $set : (Matcher $a) -> (Matcher (Collection ,a))
  (lambda [$a]
    (matcher
      {[<nil> []
        {[{} {[]}]
         [_ {}]}]
       [<cons $ _> [a]
        [$tgt tgt]]
       [<cons _ $> [(set a)]
        [$tgt {tgt}]]
       [$ [something]
        {[$tgt {tgt}]}]
       })))

;
; Types of types are declared with '::' infix operator.
; '::' operator is left-associative as ':'.
; A matcher "tree" is auot-generated by the definition of "Tree" algebraic-data-type.
;
(define-type $Tree :: Type -> Type
  (type-lambda [$a]
    (algebraic-data-type
      {<leaf a>
       <node (Tree a) (Tree a)>
       })))

(define-type $Ordering :: Type
  (algebraic-data-type
    {<less>
     <equal>
     <greater>
     }))

(define $map : [($a -> $b) (Collection ,a)] -> (Collection ,b)
  (lambda [$fn $ls]
    (match ls (list something)
      {[<nil> {}]
       [<cons $x $xs> {(fn x) @(map fn xs)}]})))

;
; We need to pass matcher to some function to indicate what matcher to use.
; This is because there are many muchers for one type.
;
(define $remove : (Matcher $a) -> [(Collection ,a) ,a] -> (Collection ,a)
  (lambda [$matcher]
    (lambda [$xs $x]
      (match xs (list matcher)
        {[<nil> {}]
         [<cons ,x $rs> rs]
         [<cons $y $rs> {y @((remove a) rs x)}]}))))

(test ((remove (mod 13)) {10 2 14} 1))

;;
;; Class Example
;;

(define-class $Show [$a]
  {$show : (,a -> String)})

(define-class $Eq [$a $b]
  {$eq? : ([,a ,b] -> Bool)})

(define-class $Match [$a]
  {$data-to-matcher : ,a -> (Matcher ,a)}
  {$matcher-to-type : (Matcher ,a) -> Type})

(define $match? : $a :: Match -> Bool
  (lambda [$x $y]
    (match [x y] [(data-to-matcher x) (data-to-matcher y)]
      {[[$zs ,zs] #t]
       [_ #f]})))

(define-class $Ord [$a $b]
  {$compare : ([,a ,b] -> Ordering)
   $lt? : ([,a ,b] -> Bool)
   $gt? : ([,a ,b] -> Bool)
   $le? : ([,a ,b] -> Bool)
   $ge? : ([,a ,b] -> Bool)})

(class-instance Show Char {[$show show-char]})
(class-instance Show Integer {[$show show-integer]})
(class-instance Show String {[$show id]})
(class-instance Show (Collection $a :: Show) {[$show show-list]})

(class-instance Ord [Integer Integer]
  {[$compare compare-integer]
   [$lt? lt-i]
   [$gt? gt-i]
   [$le? lt-i]
   [$ge? gt-i]})

;
; ':' and '::' operator are left-associative.
; i.e. ($a :: Show -> String) is same with (($a :: Show) -> String).
;
(define $print : ($a :: Show -> String)
  (lambda [x] (++ (show x) "\n")))

;;;
;;; Matcher depends on Class
;;;
(define $multiset-ord : (Matcher $a :: Ord) -> (Matcher (Collection ,a))
  (matcher ...))

(define $multiset-eq : (Matcher $a :: Eq) -> (Matcher (Collection ,a))
  (matcher ...))

(define $multiset-normal : (Matcher $a) -> (Matcher (Collection ,a))
  (matcher ...))

(define-kind $Multiset [$A]
  {$multiset : (Matcher $a :: ,A) -> Matcher (Collection ,a)})

(kind-instance Multiset Ord {[$multiset multiset-ord]})

(kind-instance Multiset Eq {[$multiset multiset-eq]})

;
; Subclassing sytstem enable to choose `multiset-ord' not `multiset-normal'
; when the type class of the type of the argument is `Ord'.
; e.gi. Ord <: Eq <: Type
;
(kind-instance Multiset Type {[$multiset multiset-normal]})

;;;
;;; Partial evaluation
;;;

;
; e.g. (+ $ 10) => (lambda [$x] (+ x 10))
;      (+3 $2 20 $1) => (lambda [$v1 $v2] (+3 v2 10 v1))
;
((+ $ 10) 5)

((map id $) {1 2 3})

;;
;; predicate pattern
;;

<cons ?(lambda [$x] (lt? x 10)) _>

<cons ?(lt? $ 10) _>

;;
;; IO
;;
(define $main : Args ->  (IO [])
  (lambda [$args]
    (do {(write "input : ")
         (flush)
         [$val (read)]
         (write {@"output : " @(show val) @"\n"})}
        [])))

(define $read-two-line : (IO String)
  (do {[$line1 (read-line)]
       [$line2 (read-line)]}
      {@line1 @line2}))

;;;
;;; Module system
;;;

;;
;; Very simple module system, for now.
;;

(module $json)

(export {encode decode})

(import json)

;;;
;;; Buildins
;;;

;;
;; Buildin Types
;;

Nothing
Bool
Integer
Float
Double
Char
String

VarName

Collection
IO
Pattern
Matcher

;;
;; Buildin Class
;;

Show
Eq
Ord
Match
Monad

;;;
;;; Message Passing
;;;

(send node-name message)

(recieve matcher
  {[...]
   ...})
