;;;;;
;;;;; Design of Egison3
;;;;;

;;;
;;; Type system
;;;

;;
;; Type Examples
;;

;
; Types are declared with `:' infix operator.
; `:' operator is left-associative.
;    
(define $add : (\ [Integer Integer] Integer)
  (lambda [$x : Integer $y] (+ x y : Integer) : Integer))

;
; Data which defines how to pattern-match is called `matcher'.
; A mather is defined with a matcher expression.
; A mather expression takes primitive-match-clauses as a type expression of Egison2.
; The type of matcher is `(Matcher <target-type>)'.
; `Matcher' is primitive-pattern-constructor as `\'.
;
(define $integer : (Matcher Integer)
  (matcher
    {[,$val []
      {[$tgt (if (eq? val tgt)
                 {[]}
                 {})]}]
     [$ [something]
      {[$tgt {tgt}]}]}))

;
; Types and mathers have one-to-many relationships.
; e.g.
; Integer -> integer
;         -> (mod 10)
;         -> (mod 100)
;
(define $mod : (\ Integer (Matcher Integer))
  (lambda [$m]
    (matcher
      {[,$val []
        {[$tgt (if (eq? (modulo val m) (modulo tgt m))
                   {[]}
                   {})]}]
       [$ [integer]
        {[$tgt {(modulo tgt m)}]}]
       })))

;
; `function' expression is like `match-lambda' of other languages.
;
(define $list : (\ (Matcher $a) (Matcher (Collection ,a)))
  (lambda [$a]
    (matcher
      {[,$val []
        {[$tgt (if ((equal-list? a) val tgt)
                   {[]}
                   {})]}]
       [<nil> []
        {[{} {[]}]
         [_ {}]}]
       [<cons $ $> [a (list a)]
        {[{$x @$xs} {[x xs]}]
         [_ {}]}]
       [<snoc $ $> [a (list a)]
        {[{@$xs $x} {[x xs]}]
         [_ {}]}]
       [<join ,$hs $> [(list a)]
        {[$tgt (letrec {[$looper (function [(list a) (list a)]
                                   {[[<nil> $ys] {ys}]
                                    [[<cons $x $xs2> <cons ,x $ys2>] (looper xs2 ys2)]
                                    [[_ _] {}]})]}
                 (looper hs tgt))]}]
       [<join $ $> [(list a) (list a)]
        {[$tgt (letrec {[$looper (lambda [$ret $xs $ys]
                                   (match ys (list a)
                                     {[<nil> {@ret [xs {}]}]
                                      [<cons $y $ys2> (looper {@ret [xs ys]} {@xs y} ys2)]}))]}
                 (looper {} {} tgt))]}]
       [<nioj ,$ts $> [(list a)]
        {[$tgt (letrec {[$looper (function [(list a) (list a)]
                                   {[[<nil> $ys] {ys}]
                                    [[<snoc $x $xs2> <snoc ,x $ys2>] (looper xs2 ys2)]
                                    [[_ _] {}]})]}
                 (looper ts tgt))]}]
       [<nioj $ $> [(list a) (list a)]
        {[$tgt (letrec {[$looper (lambda [$ret $xs $ys]
                                   (match ys (list a)
                                     {[<nil> {@ret [xs {}]}]
                                      [<snoc $y $ys2> (looper {[xs ys] @ret} {@xs y} ys2)]}))]}
                 (looper {} {} tgt))]}]
       [$ [something]
        {[$tgt {tgt}]}]
       })))

(define $multiset-normal : (\ (Matcher $a) (Matcher (Collection ,a)))
  (lambda [$a]
    (matcher
      {[,$val []
        {[$tgt (if ((equal-multiset? a) val tgt)
                   {[]}
                   {})]}]
       [<nil> []
        {[{} {[]}]
         [_ {}]}]
       [<cons $ $> [a (multiset a)]
        {[$tgt (match-all tgt (list a)
                 [<join $hs <cons $x $ts>> [x {@hs @ts}]])]}]
       [<join ,$xs $> [(multiset a)]
        {[$tgt (letrec {[$looper (function [(multiset a) (multiset a)]
                                   {[[<nil> $tgt2] {[tgt2]}]
                                    [[<cons $x $xs2> <cons ,x $tgt2>] (looper xs2 tgt2)]
                                    [_ {}]})]}
                 (looper xs tgt))]}]
       [$ [something]
        {[$tgt {tgt}]}]
       })))

;
; Definition of multiset is written also as below.
; * pay atterntion around `cons' matcher clauses.
;
(define $multiset-eq : (\ (Matcher $a) (Matcher (Collection ,a)))
  (lambda [$a]
    (matcher
      {[,$val []
        {[$tgt (if ((equal-multiset? a) val tgt)
                   {[]}
                   {})]}]
       [<nil> []
        {[{} {[]}]
         [_ {}]}]
       [<cons $ _> [a]
        {[$tgt (unique tgt)]}]
       [<cons ,val $> [(multiset a)]
        {[$tgt (match-all tgt (list a)
                 [<join $hs <cons ,val $ts>> [{@hs @ts}]])]}]
       [<join ,$xs $> [(multiset a)]
        {[$tgt (letrec {[$looper (function [(multiset a) (multiset a)]
                                   {[[<nil> $tgt2] {[tgt2]}]
                                     [[<cons $x $xs2> <cons ,x $tgt2>] (looper xs2 tgt2)]
                                     [_ {}]})]}
                 (looper xs tgt))]}]
       [$ [something]
        {[$tgt {tgt}]}]
       })))

(define $set : (\ (Matcher $a) (Matcher (Collection ,a)))
  (lambda [$a]
    (matcher
      {[<nil> []
        {[{} {[]}]
         [_ {}]}]
       [<cons $ _> [a]
        [$tgt tgt]]
       [<cons _ $> [(set a)]
        [$tgt {tgt}]]
       [$ [something]
        {[$tgt {tgt}]}]
       })))

;
; Types of types are declared with `::' infix operator.
; `::' operator is left-associative as `:'.
; A matcher `tree' is auto-generated by the definition of `Tree' algebraic-data-type.
;
(define-type $Nat
  (| <o>
     <s Nat>))

(define-type ($Tree $A)
  (| <leaf A>
     <node (Tree A) (Tree A)>
     ))

(define-type $Ordering
  (| <less>
     <equal>
     <greater>
     ))

(define $map : (\ [(\ $a $b) (Collection ,a)] (Collection ,b))
  (lambda [$fn $ls]
    (match ls (list something)
      {[<nil> {}]
       [<cons $x $xs> {(fn x) @(map fn xs)}]})))

;
; We need to pass matcher to some function to indicate what matcher to use.
; This is because there are many muchers for one type.
;
(define $remove : (\ (Matcher $a) (\ [(Collection ,a) ,a] (Collection ,a)))
  (lambda [$matcher]
    (lambda [$xs $x]
      (match xs (list matcher)
        {[<nil> {}]
         [<cons ,x $rs> rs]
         [<cons $y $rs> {y @((remove a) rs x)}]}))))

(test ((remove (mod 13)) {10 2 14} 1))

(define $match? : (\ [$a :: Match ,a] Bool)
  (lambda [$x $y]
    (match [x y] [(data-to-matcher x) (data-to-matcher y)]
      {[[$zs ,zs] #t]
       [_ #f]})))

;;
;; Class Example
;;

(define-class ($Show $a)
  {$show : (\ ,a String)})

(define-class ($Match $a)
  {$data-to-matcher : (\ ,a (Matcher ,a))}
  {$matcher-to-type : (\ (Matcher ,a) Type)})

(define-class ($Eq $a)
  {$eq? : (\ [,a ,a] Bool)})

(define-class ($Ord $a) <: (Eq ,a)
  {$compare : (\ [,a ,a] Ordering)})

(instance Show Char {[$show show-char]})
(instance Show Integer {[$show show-integer]})
(instance Show String {[$show id]})
(instance Show (Collection _ :: Show) {[$show show-list]})

(instance Ord [Integer]
  {[$compare compare-integer]})

;
; `:' and `::' operators are left-associative.
; i.e. (\ $a :: Show String) is equivalent to (\ ($a :: Show) String).
;
(define $print : (\ ($a :: Show) String)
  (lambda [$x] {@(show x) '\n'}))

(define-class ($Multiset $a)
  {$multiset : (\ (Matcher ,a) (Matcher (Collection ,a)))})

(instance Multiset _ :: Ord {[$multiset multiset-ord]})
(instance Multiset _ :: Eq {[$multiset multiset-eq]})
(instance Multiset _ :: Type {[$multiset multiset-normal]})


;;;
;;; Matcher depends on Class
;;;

;              
; Subclassing sytstem enable to choose `multiset-ord' not `multiset-normal'
; when the type class of the type of the argument is `Ord'.
; e.g. Ord <:: Eq <:: Type
; 
; Egison has subtyping system too.
; e.g. Nat <: Integer
;
[1] <=> 1 <=> [[1]]
(define $multiset-ord : (\ (Matcher $a :: [Ord Show]) (Matcher (Collection ,a)))
  (lambda [$a]
    (matcher ...)))

(define $multiset-eq : (\ (Matcher $a :: Eq) (Matcher (Collection ,a)))
  (lambda [$a]
    (matcher ...)))

(define $multiset-normal : (\ (Matcher $a) (Matcher (Collection ,a)))
  (lambda [$a]
    (matcher ...)))


;;;
;;; Partial evaluation
;;;

;
; e.g. (+ $ 10) => (lambda [$x] (+ x 10))
;      (+3 $2 20 $1) => (lambda [$v1 $v2] (+3 v2 10 v1))
;
((+ $ 10) 5)

((map id $) {1 2 3})

;;
;; predicate pattern
;;

<cons ?(lambda [$x] (lt? x 10)) _>

<cons ?(lt? $ 10) _>

;;;
;;; Pattern-matching examples
;;;

;;
;; pattern function
;;

(define $seq-pat : (\ [VarName (Pattern (Collection Integer))] (Pattern (Collection Integer)))
  (lambda [$var $pat]
    (seq-pat-helper var pat 1)))

(define $seq-pat-helper : (\ [VarName (Pattern (Collection Integer)) Integer] (Pattern (Collection Integer)))
  (lambda [$var $pat $i]
    <cons ,(+ `var i) (| (seq-pat-helper var (+ i 1)) pat)))

(loop %l %i (between 1 n) <cons $a_i l> <nil>) <=> (n-pat %a (between 1 n) <nil>)

(define $n-pat : (\ [VarName (Collection Integer) (Pattern $a)] (Pattern a))
  (lambda [$var $range $pat]
    (match range (list something)
      {[<nil> pat]
       [<cons $i $is> <cons `$var_i (n-pat var is pat)]})))

(define $loop : (\ [VarName VarName (Collection Integer) (Pattern $a)] (Pattern a))
  (lambda [$var $range $pat]
    (match range (list something)
      {[<nil> pat]
       [<cons $i $is> <cons `$var_i (loop var is pat)]})))

(define $loop : (\ [VarName VarName (Collection Integer) (Pattern $a)] (Pattern a))
  (lambda [$loop-var $range $pat]
    (match range (list something)
      {[<nil> pat]
       [<cons $`loop-var $range2>  (loop loop-var range2 pat)]})))


;;
;; IO
;;
(define $main : (\ Args (IO []))
  (lambda [$args]
    (do {(write "input : ")
         (flush)
         [$val (read)]
         (write {@"output : " @(show val) @"\n"})}
        [])))

(define $read-two-line : (IO String)
  (do {[$line1 (read-line)]
       [$line2 (read-line)]}
      {@line1 @line2}))

;;;
;;; Module system
;;;

;;
;; Very simple module system, for now.
;;

(module $json)

(export {encode decode})

(import json)

;;;
;;; Buildins
;;;

;;
;; Buildin Types
;;

Nothing
Bool
Integer
Float
Double
Char
String

VarName

Collection
IO
Pattern
Matcher

;;
;; Buildin Class
;;

Show
Eq
Ord
Match
Monad

;;;
;;; Message Passing
;;;

(send node-name message)

(recieve matcher
  {[...]
   ...})

;;;
;;; 型の目的
;;;

コンパイラの最適化に使う
ad-hoc polymorphism
型情報をプログラムから分離したい

ユーザの自明な間違いを排除する

`Tree' 
()
