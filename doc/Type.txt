;;
;; Type System Design
;;

(define $add : ([Integer Integer] -> Intger)
  (lambda [$x $y] (+ x y)))

(define $List : (Type -> Type)
  (lambda [$a]
    (type (Collection a)
       ...
       )))

(define $Mod : (Integer -> Type)
  (lambda [$m]
    (type Integer
      {[,$n []
        {[$tgt (if (eq? (mod tgt m) (mod n m))
                   {[]}
                   {})]}]
       [_ [Integer]
	    {[$tgt {(mod tgt m)}]}]
       })))

(define $map : (lambda [$a $b] ([(a -> b) {a}] -> {b})) :: ([SomeType SomeType] -> SomeType)
  (lambda [_ _]
    (lambda [$fn $ls]
      (match ls (List Something)
        {[<nil> {}]
         [<cons $x $xs> {(fn x) @(map fn xs)}]})))

(define $remove : (lambda [$a] ([{a} a] -> {a})) :: (Eq -> SomeType)
  (lambda [$a]
    (lambda [$xs $x]
      (match xs (List a)
        {[<nil> {}]
         [<cons ,x $rs> rs]
         [<cons $y $rs> {y @(remove a rs x)}]})))

(test ( remove (Mod 13)  {10 2 14} 1))

(define-class $Show
  {[Integer {[$show show-integer]}
   [String {[$show id]}]
   ...}))

(extend-class Show Char {[$show show-char]})

(define $print : (lambda [$a] (a -> String)) :: (Show -> SomeType)
  (lambda [x] (++ (show x) "\n")))

(define-type ...)
