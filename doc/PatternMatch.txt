;;;;;
;;;;; Pattern Matching
;;;;;


;;;
;;; Pattern matching mechanism
;;; -- First class patterns
;;;

;;
;; Egison4 does not have macro as Egison2.
;;

;
; Only varialbes in value patterns and predicate patterns should be able to refer to the result of the processing of the pattern matching.
;
; "PatVar" and "Pattern" are primitive-pattern-constructors introdueced with Egison4 as "Matcher".
;

(define $twin : (\ [(PatVar Hai) (Pattern (Collection Hai))] (Pattern (Collection Hai)))
  (lambda [$pvar $pat]
    ;; Binding to pattern variables in lambda arguments must be lift up to the out of lambda.
    <cons $`pvar
     ;; Binding to pattern variables can be refered by adding '`' ahead of pattern variables.
     <cons ,`pvar
      ;; Binding in patterns in the lambda arguments must be lift up to the out of lambda, too.
      pat>>))
 
(define $shuntsu : (\ [(PatVar Hai) (Pattern (Collection Hai))] (Pattern (Collection Hai)))
  (lambda [$pvar $pat]
    ;; Binding to pattern variables which first appear in lambda body must not be lift up to the out of lambda.
    <cons (& <num $s $n> $`pvar)
     <cons <num ,s ,(+ n 1)>
      <cons <num ,s ,(+ n 2)>
       pat>>>))
        
(define $kohtsu : (\ [(PatVar Hai) (Pattern (Collection Hai))] (Pattern (Collection Hai)))
  (lambda [$pvar $pat]
    <cons $`pvar
     <cons ,`pvar
      <cons ,`pvar
       pat>>>))
 
(define $yaku? : (\ (Collection Hai) Bool)
  (function (multiset hai)
    {[(twin $th_1 (| (shuntsu $sh_1 (shuntsu $sh_2 (shuntsu $sh_3 (shuntsu $sh_4 <nil>))))
                     (shuntsu $sh_1 (shuntsu $sh_2 (shuntsu $sh_3 (kohtsu $kh_1 <nil>))))
                     (shuntsu $sh_1 (shuntsu $sh_2 (kohtsu $kh_1 (kohtsu $kh_2 <nil>))))
                     (shuntsu $sh_1 (kohtsu $kh_1 (kohtsu $kh_2 (kohtsu $kh_3 <nil>))))
                     (kohtsu $kh_1 (kohtsu $kh_2 (kohtsu $kh_3 (kohtsu $kh_4 <nil>))))
                     (twin $th_2 (twin $th_3 (twin $th_4 (twin $th_5 (twin $th_6 (twin $th_7 <nil>))))))
                     ))
      #t]
     [_
      #f]}))

;;
;; Haskell Implementation
;;

patternMatch :: Environment -> [MatchState] -> IOThrowsError [MatchResult]
patternMatch _ _ [] = return []
patternMatch MatchOne env ((frame, []):_) = do
  return [frame]
patternMatch MatchAll env ((frame, []):mStates) = do
  ret <- patternMatch env mAtoms
  return (frame:ret)
patternMatch mFlag env ((frame, ((matcher,pattern,target):mAtoms)):mStates) = do
  rets <- patternMatchCore MatchAll env (frame, (matcher, pattern, target))
  patternMatch mFlag env ((map (\ret -> (ret, mAtoms)) rets) ++ mStates)

patternMatchCore :: Environment -> MatchResult -> EgisonObject -> EgisonObject -> EgisonObject -> IOThrowsError [MatchResult]
patternMatchCore env frame matcher pattern target =
  patternVal <- eval1 pattern
  case patternVal of
    (ValuePattern env expr) ->
       
evalValuePat env expr frame =
evalValuePat env (OmitExpr var nums) frame =
  case getValue env (var, nums) of
    (VarName var nums) -> cEval (getValueFromFrame frame (var, nums))
    _ -> throwError "..."
evalValuePat env expr frame = do
  val <- eval1 env expr
  evalValuePatRecursively env val frame
  

MatchFlag = MatchAll |  MatchOne

MatchState = [(MatchResult, [MatchAtom])]

MatchAtom = (Matcher, Pattern, Target)
