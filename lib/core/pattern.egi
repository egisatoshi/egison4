(module pattern)

(export-all)

(define $n-cons :: ([Integer Variable] : Pattern)
  (lambda [$n $v]
    (loop $l $i (between 1 n) <cons $`v_i l> _)))

(define $comb :: ([Integer Variable] : Pattern)
  (lambda [$n $v]
    (loop $l $i (between 1 n) <join _ <cons $`v_i l>> _)))

(define $comb/double :: ([Integer Variable] : Pattern)
  (lambda [$n $v]
    (loop $l $i (between 1 n) <join _ (& <cons $`v_i _> l)> _)))

(define $cloop :: ([Integer Variable] : Pattern)
  (lambda [$n $v]
    (loop $l $i (between 1 n) {`v_i @l} {})))
