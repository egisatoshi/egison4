(module base)

(export-all)

(define $or : ([Bool Bool] -> Bool)
  (lambda [$b1 $b2]
    (match b1 bool
      {[<true> #t]
       [<false> b2]})))

(define $and : ([Bool Bool] -> Bool)
  (lambda [$b1 $b2]
    (match b1 Bool
      {[<true> b2]
       [<false> #f]})))

(define $not : (Bool -> Bool)
  (lambda [$b]
    (match b Bool
      {[<true> #f]
       [<false> #t]})))

(define $char : Type
  (type Char
    {[,$c []
      {[$tgt (if (eq-c? tgt c)
                 {[]}
                 {})]}]
     [_ [Something]
      {[$tgt {tgt}]}]
     }))

(define $string :: Type
  (type String
    {[,$s []
      {[$tgt (if (eq-s? tgt s)
                 {[]}
                 {})]}]
     [_ [Something]
      {[$tgt {tgt}]}]
     }))

(define $order :: Type
  (algebraic-data-type Order
    (|| <leaf a>
        <node (bTree a) (bTree a)>))))

(define $match? :: ([$a a] : Bool)
  (lambda [$x $y]
    (match x _
      {[,y #t]
       [_ #f]})))

(define $= :: ([$a a] : Bool)
  (lambda [$x $y]
    (and (match? x y) (match? y x))))
